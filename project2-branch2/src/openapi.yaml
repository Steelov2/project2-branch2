swagger: "2.0"
info:
  description: ""
  version: "1.0.0"
  title: "Swagger Bookstore"
  # termsOfService: "http://swagger.io/terms/"
  # contact:
  #   email: "apiteam@swagger.io"
  # license:
  #   name: "Apache 2.0"
  #   url: "http://www.apache.org/licenses/LICENSE-2.0.html"
# host: "bookstore.swagger.io"
# basePath: "/v2"
tags:
  - name: "book"
    description: "Everything about your books"
    # externalDocs:
    #   description: "Find out more"
    #   url: "http://swagger.io"
  - name: "publisher"
    description: "Everything about your publishers"
  - name: "author"
    description: "Everything about your authors"
  - name: "genre"
    description: "Everything about your genres"
  - name: "order"
    description: "Everything about your orders"
    # externalDocs:
    #   description: "Everything about your authors"
    #   url: "http://swagger.io"
schemes:
  - "https"
paths:
  /api/v1/books/saveBook:
    post:
      tags:
        - "book"
      summary: "Add a new book to the store"
      description: ""
      operationId: "saveBook"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Author object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Book"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        "405":
          description: "Invalid input"


  /api/v1/books/updateBook:

    put:
      tags:
        - "book"
      summary: "Updates a book in the store with form data"
      description: ""
      operationId: "updateBook"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Books object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Book"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        "405":
          description: "Invalid input"

  /api/v1/books/booksList:
    get:
      tags:
        - "book"
      summary: "Get all books"
      description: ""
      operationId: "getAllBooks"
      produces:
        - "application/xml"
        - "application/json"

      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"


  /api/v1/books/book/{bookID}:
    get:
      tags:
        - "book"
      summary: "Find book by ID"
      description: "Returns a single book"
      operationId: "getBookById"
      produces:
        - "application/json"
      parameters:
        - name: "bookID"
          in: "path"
          description: "ID of book to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        "404":
          description: "Book not found"


    delete:
      tags:
        - "book"
      summary: "Deletes a book"
      description: ""
      operationId: "deleteBookById"
      produces:
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "bookID"
          in: "path"
          description: "Book id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "404":
          description: "Book not found"

  /api/v1/books/book/bookName/{bookName}:
    get:
      tags:
        - "book"
      summary: "Get book by genre name"
      description: ""
      operationId: "bookName"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "bookName"
          in: "path"
          description: "Book is returned "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        "400":
          description: "Invalid bookName supplied"
        "404":
          description: "Book not found"

  /api/v1/books/book/genreName/{genreName}:
    get:
      tags:
        - "book"
      summary: "Get book by name"
      description: ""
      operationId: "genreName"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "genreName"
          in: "path"
          description: "Books by genre are returned "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        "400":
          description: "Invalid genreName supplied"
        "404":
          description: "Book not found"



  /api/v1/publishers/savePublisher:
    post:
      tags:
        - "publisher"
      summary: "Add a new publisher to the store"
      description: ""
      operationId: "savePublisher"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Author object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Publisher"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Publisher"
        "405":
          description: "Invalid input"


  /api/v1/publishers/updatePublisher:

    put:
      tags:
        - "publisher"
      summary: "Updates a publisher in the store with form data"
      description: ""
      operationId: "updatePublisher"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Publishers object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Publisher"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Publisher"
        "405":
          description: "Invalid input"

  /api/v1/publishers/publishersList:
    get:
      tags:
        - "publisher"
      summary: "Get all publishers"
      description: ""
      operationId: "getAllPublisher"
      produces:
        - "application/xml"
        - "application/json"

      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Publisher"


  /api/v1/publishers/publisher/{publisherID}:
    get:
      tags:
        - "publisher"
      summary: "Find publisher by ID"
      description: "Returns a single publisher"
      operationId: "getPublisherById"
      produces:
        - "application/json"
      parameters:
        - name: "publisherID"
          in: "path"
          description: "ID of publisher to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Publisher"
        "404":
          description: "Publisher not found"


    delete:
      tags:
        - "publisher"
      summary: "Deletes a publisher"
      description: ""
      operationId: "deletePublisherById"
      produces:
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "publisherID"
          in: "path"
          description: "Publisher id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "404":
          description: "Publisher not found"

  /api/v1/publishers/publisher/publisherName/{publisherName}:
    get:
      tags:
        - "publisher"
      summary: "Get publisher by name"
      description: ""
      operationId: "publisherName"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "publisherName"
          in: "path"
          description: "Publisher is returned "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Publisher"
        "400":
          description: "Invalid publisherName supplied"
        "404":
          description: "Publisher not found"




  /api/v1/authors/saveAuthor:
    post:
      tags:
        - "author"
      summary: "Add a new author to the store"
      description: ""
      operationId: "saveAuthor"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Author object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Author"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Author"
        "405":
          description: "Invalid input"


  /api/v1/authors/updateAuthor:

    put:
      tags:
        - "author"
      summary: "Updates a author in the store with form data"
      description: ""
      operationId: "updateAuthor"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Authors object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Author"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Author"
        "405":
          description: "Invalid input"

  /api/v1/authors/authorsList:
    get:
      tags:
        - "author"
      summary: "Get all authors"
      description: ""
      operationId: "getAllAuthors"
      produces:
        - "application/xml"
        - "application/json"

      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Author"


  /api/v1/authors/author/{authorID}:
    get:
      tags:
        - "author"
      summary: "Find author by ID"
      description: "Returns a single author"
      operationId: "getAuthorById"
      produces:
        - "application/json"
      parameters:
        - name: "authorID"
          in: "path"
          description: "ID of author to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Author"
        "404":
          description: "Author not found"


    delete:
      tags:
        - "author"
      summary: "Deletes a author"
      description: ""
      operationId: "deleteAuthorById"
      produces:
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "authorID"
          in: "path"
          description: "Author id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "404":
          description: "Author not found"

  /api/v1/authors/author/authorName/{authorName}:
    get:
      tags:
        - "author"
      summary: "Get author by  name"
      description: ""
      operationId: "authorName"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "authorName"
          in: "path"
          description: "Author is returned "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Author"
        "400":
          description: "Invalid authorName supplied"
        "404":
          description: "Author not found"

  /api/v1/authors/author/genreName/{genreName}:
    get:
      tags:
        - "author"
      summary: "Get author by genre name"
      description: ""
      operationId: "authorGenreName"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "genreName"
          in: "path"
          description: "Authors by genre are returned "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Author"
        "400":
          description: "Invalid genreName supplied"
        "404":
          description: "Author not found"



  /api/v1/genres/saveGenre:
    post:
      tags:
        - "genre"
      summary: "Add a new genre to the store"
      description: ""
      operationId: "saveGenre"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Genre object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Genre"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Genre"
        "405":
          description: "Invalid input"


  /api/v1/genres/updateGenre:

    put:
      tags:
        - "genre"
      summary: "Updates a genre in the store with form data"
      description: ""
      operationId: "updateGenre"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Genres object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Genre"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Genre"
        "405":
          description: "Invalid input"

  /api/v1/genres/genresList:
    get:
      tags:
        - "genre"
      summary: "Get all genres"
      description: ""
      operationId: "getAllGenres"
      produces:
        - "application/xml"
        - "application/json"

      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Genre"


  /api/v1/genres/genre/{genreID}:
    get:
      tags:
        - "genre"
      summary: "Find genre by ID"
      description: "Returns a single genre"
      operationId: "getGenreById"
      produces:
        - "application/json"
      parameters:
        - name: "genreID"
          in: "path"
          description: "ID of genre to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Genre"
        "404":
          description: "Genre not found"


    delete:
      tags:
        - "genre"
      summary: "Deletes a genre"
      description: ""
      operationId: "deleteGenreById"
      produces:
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "genreID"
          in: "path"
          description: "Genre id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "404":
          description: "Genre not found"

  /api/v1/genres/genre/genreName/{genreName}:
    get:
      tags:
        - "genre"
      summary: "Get genre by genre name"
      description: ""
      operationId: "genresName"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "genreName"
          in: "path"
          description: "Genre is returned "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Genre"
        "400":
          description: "Invalid genreName supplied"
        "404":
          description: "Genre not found"


  /api/v1/orders/saveOrder:
    post:
      tags:
        - "order"
      summary: "Add a new order to the store"
      description: ""
      operationId: "saveOrder"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Order object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "405":
          description: "Invalid input"


  /api/v1/orders/updateOrder:

    put:
      tags:
        - "order"
      summary: "Updates a order in the store with form data"
      description: ""
      operationId: "updateOrder"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Orders object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "405":
          description: "Invalid input"

  /api/v1/orders/ordersList:
    get:
      tags:
        - "order"
      summary: "Get all orders"
      description: ""
      operationId: "getAllOrders"
      produces:
        - "application/xml"
        - "application/json"

      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"


  /api/v1/orders/order/{orderID}:
    get:
      tags:
        - "order"
      summary: "Find order by ID"
      description: "Returns a single order"
      operationId: "getOrderById"
      produces:
        - "application/json"
      parameters:
        - name: "orderID"
          in: "path"
          description: "ID of order to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "404":
          description: "Order not found"


    delete:
      tags:
        - "order"
      summary: "Deletes a order"
      description: ""
      operationId: "deleteOrderById"
      produces:
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "orderID"
          in: "path"
          description: "Order id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "404":
          description: "Order not found"

  /api/v1/user/orders/updateOrder:

    put:
      tags:
        - "order"
      summary: "Updates a order in the store with form data for user"
      description: ""
      operationId: "updateOrderForUser"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Orders object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "405":
          description: "Invalid input"

  /api/v1/user/orders/saveOrder:
    post:
      tags:
        - "order"
      summary: "Add a new order to the store"
      description: ""
      operationId: "saveOrderForUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Order object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "405":
          description: "Invalid input"

  /api/v1/users/saveUser:
    post:
      tags:
        - "user"
      summary: "Add a new user to the store"
      description: ""
      operationId: "saveUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "405":
          description: "Invalid input"


  /api/v1/users/updateUser:

    put:
      tags:
        - "user"
      summary: "Updates a user in the store with form data"
      description: ""
      operationId: "updateUser"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Users object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "405":
          description: "Invalid input"

  /api/v1/users/usersList:
    get:
      tags:
        - "user"
      summary: "Get all users"
      description: ""
      operationId: "getAllUsers"
      produces:
        - "application/xml"
        - "application/json"

      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"


  /api/v1/users/user/{userID}:
    get:
      tags:
        - "user"
      summary: "Find user by ID"
      description: "Returns a single user"
      operationId: "getUserById"
      produces:
        - "application/json"
      parameters:
        - name: "userID"
          in: "path"
          description: "ID of user to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"


    delete:
      tags:
        - "user"
      summary: "Deletes a user"
      description: ""
      operationId: "deleteUserById"
      produces:
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "userID"
          in: "path"
          description: "User id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "404":
          description: "User not found"

  /api/v1/users/user/userName/{userName}:
    get:
      tags:
        - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "userName"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "userName"
          in: "path"
          description: "User is returned "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /api/v1/user/users/saveUser:
    post:
      tags:
        - "user"
      summary: "Add a new user to the store"
      description: ""
      operationId: "saveUserForUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "405":
          description: "Invalid input"
  /api/v1/user/users/updateUser:

    put:
      tags:
        - "user"
      summary: "Updates a user in the store with form data"
      description: ""
      operationId: "updateUserForUser"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Users object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "405":
          description: "Invalid input"


definitions:
  Author:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      surname:
        type: "string"
        format: "byte"
      name:
        type: "string"
        format: "byte"
      patronymic:
        type: "string"
        format: "byte"
      dateOfBirth:
        type: "string"
        format: "date"
      bookList:
        type: "array"
        items:
          $ref: "#/definitions/Book"

  Publisher:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        format: "byte"
      bookList:
        type: "array"
        items:
          $ref: "#/definitions/Book"

  Book:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      price:
        type: "number"
        format: "double"
      authorList:
        type: "array"
        items:
          $ref: "#/definitions/Author"
      genreList:
        type: "array"
        items:
          $ref: "#/definitions/Genre"
      publisher:
        $ref: "#/definitions/Publisher"
      name:
        type: "string"
        format: "byte"
      numOfPages:
        type: "integer"
        format: "int64"
      year:
        type: "string"
        format: "date"
  Genre:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        format: "byte"


  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user:
        $ref: "#/definitions/User"
      orderedBooks:
        type: "array"
        items:
          $ref: "#/definitions/Book"

      status:
        type: "string"
        format: "enum"
      createdAt:
        type: "string"
        format: "date"

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
        format: "byte"
      password:
        type: "string"
        format: "byte"

      isBlocked:
        type: "boolean"
        format: "byte"

      role:
        type: "string"
        format: "enum"

externalDocs:
  description: "Find out more about Swagger"
  url: "https://swagger.io"