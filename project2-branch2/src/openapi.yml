swagger: '2.0'
info:
  description: '"Swagger configuration for application "'
  version: 1.1.0
  title: Bookstore - Spring Boot Swagger Configuration
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0"
host: localhost:8080
basePath: /
tags:
  - name: author-controller
    description: Author Controller
  - name: book-controller
    description: Book Controller
  - name: genre-controller
    description: Genre Controller
  - name: order-controller
    description: Order Controller
  - name: order-user-controller
    description: Order User Controller
  - name: publisher-controller
    description: Publisher Controller
  - name: user-controller
    description: User Controller
  - name: user-user-controller
    description: User User Controller
paths:
  /api/v1/authors/author/authorName/{name}:
    get:
      tags:
        - author-controller
      summary: getAuthorByName
      operationId: getAuthorByNameUsingGET
      produces:
        - '*/*'
      parameters:
        - name: name
          in: path
          description: name
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/AuthorRequestDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/authors/author/genreName/{genreName}:
    get:
      tags:
        - author-controller
      summary: getAuthorByGenreName
      operationId: getAuthorByGenreNameUsingGET
      produces:
        - '*/*'
      parameters:
        - name: genreName
          in: path
          description: genreName
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            uniqueItems: true
            items:
              $ref: '#/definitions/AuthorResponseDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/authors/author/{authorID}:
    get:
      tags:
        - author-controller
      summary: getAuthorById
      operationId: getAuthorByIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: authorID
          in: path
          description: authorID
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AuthorRequestDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - author-controller
      summary: deleteAuthorById
      operationId: deleteAuthorByIdUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: authorID
          in: path
          description: authorID
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /api/v1/authors/authorsList:
    get:
      tags:
        - author-controller
      summary: getAll
      operationId: getAllUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/AuthorRequestDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/authors/saveAuthor:
    post:
      tags:
        - author-controller
      summary: saveAuthor
      operationId: saveAuthorUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: authorResponseDto
          description: authorResponseDto
          required: true
          schema:
            $ref: '#/definitions/AuthorResponseDto'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/authors/updateAuthor:
    put:
      tags:
        - author-controller
      summary: updateAuthor
      operationId: updateAuthorUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: authorResponseDto
          description: authorResponseDto
          required: true
          schema:
            $ref: '#/definitions/AuthorResponseDto'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/books/book/bookName/{bookName}:
    get:
      tags:
        - book-controller
      summary: getBookByName
      operationId: getBookByNameUsingGET
      produces:
        - '*/*'
      parameters:
        - name: bookName
          in: path
          description: bookName
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/BookRequestDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/books/book/genreName/{genreName}:
    get:
      tags:
        - book-controller
      summary: getBookByGenreName
      operationId: getBookByGenreNameUsingGET
      produces:
        - '*/*'
      parameters:
        - name: genreName
          in: path
          description: genreName
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            uniqueItems: true
            items:
              $ref: '#/definitions/BookRequestDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/books/book/{bookID}:
    get:
      tags:
        - book-controller
      summary: getBookById
      operationId: getBookByIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: bookID
          in: path
          description: bookID
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/BookRequestDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - book-controller
      summary: deleteBookById
      operationId: deleteBookByIdUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: bookID
          in: path
          description: bookID
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /api/v1/books/booksList:
    get:
      tags:
        - book-controller
      summary: getAll
      operationId: getAllUsingGET_1
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/BookRequestDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/books/saveBook:
    post:
      tags:
        - book-controller
      summary: saveBook
      operationId: saveBookUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: bookUpdateDto
          description: bookUpdateDto
          required: true
          schema:
            $ref: '#/definitions/BookUpdateDto'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/BookUpdateDto'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/books/updateBook:
    put:
      tags:
        - book-controller
      summary: updateBook
      operationId: updateBookUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: bookUpdateDto
          description: bookUpdateDto
          required: true
          schema:
            $ref: '#/definitions/BookUpdateDto'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/genres/genre/genreName/{genreName}:
    get:
      tags:
        - genre-controller
      summary: getGenreByName
      operationId: getGenreByNameUsingGET
      produces:
        - '*/*'
      parameters:
        - name: genreName
          in: path
          description: genreName
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/GenreRequestDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/genres/genre/{genreID}:
    get:
      tags:
        - genre-controller
      summary: getBookById
      operationId: getBookByIdUsingGET_1
      produces:
        - '*/*'
      parameters:
        - name: genreID
          in: path
          description: genreID
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GenreRequestDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - genre-controller
      summary: deleteBookById
      operationId: deleteBookByIdUsingDELETE_1
      produces:
        - '*/*'
      parameters:
        - name: genreID
          in: path
          description: genreID
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /api/v1/genres/genresList:
    get:
      tags:
        - genre-controller
      summary: getAll
      operationId: getAllUsingGET_2
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/GenreRequestDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/genres/saveGenre:
    post:
      tags:
        - genre-controller
      summary: saveGenre
      operationId: saveGenreUsingPOST_1
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: genreRequestDTO
          description: genreRequestDTO
          required: true
          schema:
            $ref: '#/definitions/GenreRequestDto'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GenreRequestDto'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/genres/updateGenre:
    put:
      tags:
        - genre-controller
      summary: updateGenre
      operationId: updateGenreUsingPUT_1
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: genreRequestDTO
          description: genreRequestDTO
          required: true
          schema:
            $ref: '#/definitions/GenreRequestDto'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/orders/order/{orderID}:
    get:
      tags:
        - order-controller
      summary: getByID
      operationId: getByIDUsingGET
      produces:
        - '*/*'
      parameters:
        - name: orderID
          in: path
          description: orderID
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OrderRequestDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - order-controller
      summary: delete
      operationId: deleteUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: orderID
          in: path
          description: orderID
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /api/v1/orders/ordersList:
    get:
      tags:
        - order-controller
      summary: getAll
      operationId: getAllUsingGET_3
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/OrderRequestDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/orders/saveOrder:
    post:
      tags:
        - order-controller
      summary: create
      operationId: createUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: orderCreateDto
          description: orderCreateDto
          required: true
          schema:
            $ref: '#/definitions/OrderCreateDto'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/orders/updateOrder:
    put:
      tags:
        - order-controller
      summary: update
      operationId: updateUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: orderUpdateForAdmin
          description: orderUpdateForAdmin
          required: true
          schema:
            $ref: '#/definitions/OrderUpdateForAdmin'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/publishers/publisher/publisherName/{publisherName}:
    get:
      tags:
        - publisher-controller
      summary: getPublisherById
      operationId: getPublisherByIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: publisherName
          in: path
          description: publisherName
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/PublisherRequestDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/publishers/publisher/{publisherID}:
    get:
      tags:
        - publisher-controller
      summary: getPublisherById
      operationId: getPublisherByIdUsingGET_1
      produces:
        - '*/*'
      parameters:
        - name: publisherID
          in: path
          description: publisherID
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PublisherRequestDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - publisher-controller
      summary: deletePublisherById
      operationId: deletePublisherByIdUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: publisherID
          in: path
          description: publisherID
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /api/v1/publishers/publishersList:
    get:
      tags:
        - publisher-controller
      summary: getAll
      operationId: getAllUsingGET_4
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/PublisherRequestDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/publishers/savePublisher:
    post:
      tags:
        - publisher-controller
      summary: savePublisher
      operationId: savePublisherUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: publisherResponseDTO
          description: publisherResponseDTO
          required: true
          schema:
            $ref: '#/definitions/PublisherResponseDto'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PublisherResponseDto'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/publishers/updatePublisher:
    put:
      tags:
        - publisher-controller
      summary: updatePublisher
      operationId: updatePublisherUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: publisherResponseDto
          description: publisherResponseDto
          required: true
          schema:
            $ref: '#/definitions/PublisherResponseDto'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/user/orders/saveOrder:
    post:
      tags:
        - order-user-controller
      summary: create
      operationId: createUsingPOST_1
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: orderCreateDto
          description: orderCreateDto
          required: true
          schema:
            $ref: '#/definitions/OrderCreateDto'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/user/orders/updateOrder:
    put:
      tags:
        - order-user-controller
      summary: update
      operationId: updateUsingPUT_1
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: orderUpdateForUserDto
          description: orderUpdateForUserDto
          required: true
          schema:
            $ref: '#/definitions/OrderUpdateForUserDto'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/user/users/saveUser:
    post:
      tags:
        - user-user-controller
      summary: saveUser
      operationId: saveUserUsingPOST_1
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: userUpdateAndSaveUserDto
          description: userUpdateAndSaveUserDto
          required: true
          schema:
            $ref: '#/definitions/UserUpdateAndSaveUserDto'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/user/users/updateUser:
    put:
      tags:
        - user-user-controller
      summary: updateUser
      operationId: updateUserUsingPUT_1
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: userUpdateAndSaveUserDto
          description: userUpdateAndSaveUserDto
          required: true
          schema:
            $ref: '#/definitions/UserUpdateAndSaveUserDto'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/users/saveUser:
    post:
      tags:
        - user-controller
      summary: saveUser
      operationId: saveUserUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: adminUpdateAndSaveUserDto
          description: adminUpdateAndSaveUserDto
          required: true
          schema:
            $ref: '#/definitions/AdminUpdateAndSaveUserDto'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/users/updateUser:
    put:
      tags:
        - user-controller
      summary: updateUser
      operationId: updateUserUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: adminUpdateAndSaveUserDto
          description: adminUpdateAndSaveUserDto
          required: true
          schema:
            $ref: '#/definitions/AdminUpdateAndSaveUserDto'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/users/user/userName/{userName}:
    get:
      tags:
        - user-controller
      summary: getAuthorByUserName
      operationId: getAuthorByUserNameUsingGET
      produces:
        - '*/*'
      parameters:
        - name: userName
          in: path
          description: userName
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/UserResponseDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/v1/users/user/{userID}:
    get:
      tags:
        - user-controller
      summary: getByID
      operationId: getByIDUsingGET_1
      produces:
        - '*/*'
      parameters:
        - name: userID
          in: path
          description: userID
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserResponseDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - user-controller
      summary: deleteUserById
      operationId: deleteUserByIdUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: userID
          in: path
          description: userID
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /api/v1/users/usersList:
    get:
      tags:
        - user-controller
      summary: getAll
      operationId: getAllUsingGET_5
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/UserResponseDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found

definitions:
  AdminUpdateAndSaveUserDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
      isBlocked:
        type: boolean
      password:
        type: string
      role:
        type: string
        enum:
          - ADMIN
          - USER
      username:
        type: string
    title: AdminUpdateAndSaveUserDto
  AuthorRequestDto:
    type: object
    properties:
      authorsBooksList:
        type: array
        items:
          $ref: '#/definitions/BookResponseDto'
      authorsGenreList:
        type: array
        items:
          $ref: '#/definitions/GenreRequestDto'
      dateOfBirth:
        type: string
        format: date
      id:
        type: integer
        format: int64
      name:
        type: string
      patronymic:
        type: string
      surname:
        type: string
    title: AuthorRequestDto
  AuthorResponseDto:
    type: object
    properties:
      dateOfBirth:
        type: "string"
        format: "date"
      id:
        type: integer
        format: int64
      name:
        type: string
      patronymic:
        type: string
      surname:
        type: string
    title: AuthorResponseDto
  BookDto:
    type: object
    properties:
      authorList:
        type: array
        items:
          $ref: '#/definitions/AuthorResponseDto'
      genreList:
        type: array
        items:
          $ref: '#/definitions/GenreRequestDto'
      id:
        type: integer
        format: int64
      name:
        type: string
      numberOfPages:
        type: integer
        format: int32
      price:
        type: integer
        format: int32
      yearOfIssue:
        type: "string"
        format: "date"
    title: BookDto
  BookRequestDto:
    type: object
    properties:
      authorList:
        type: array
        items:
          $ref: '#/definitions/AuthorResponseDto'
      genreList:
        type: array
        items:
          $ref: '#/definitions/GenreRequestDto'
      id:
        type: integer
        format: int64
      name:
        type: string
      numberOfPages:
        type: integer
        format: int32
      price:
        type: integer
        format: int32
      publisher:
        $ref: '#/definitions/PublisherResponseDto'
      yearOfIssue:
        type: "string"
        format: "date"
    title: BookRequestDto
  BookResponseDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      numberOfPages:
        type: integer
        format: int32
      price:
        type: integer
        format: int32
      publisherId:
        type: integer
        format: int64
      yearOfIssue:
        type: "string"
        format: "date"
    title: BookResponseDto
  BookUpdateDto:
    type: object
    properties:
      authorListIds:
        type: array
        items:
          type: integer
          format: int64
      genreListIds:
        type: array
        items:
          type: integer
          format: int64
      id:
        type: integer
        format: int64
      name:
        type: string
      numberOfPages:
        type: integer
        format: int32
      price:
        type: integer
        format: int32
      publisherIds:
        type: integer
        format: int64
      yearOfIssue:
        type: "string"
        format: "date"
    title: BookUpdateDto
  GenreRequestDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    title: GenreRequestDto
  OrderCreateDto:
    type: object
    properties:
      createdAt:
        type: "string"
        format: "date"
      id:
        type: integer
        format: int64
      orderedBooksIds:
        type: array
        items:
          type: integer
          format: int64
      status:
        type: string
        enum:
          - CANCELLED
          - CREATED
          - PERFORMED
          - PROCESSING
      userId:
        type: integer
        format: int64
    title: OrderCreateDto
  OrderRequestDto:
    type: object
    properties:
      createdAt:
        type: "string"
        format: "date"
      id:
        type: integer
        format: int64
      orderedBooks:
        type: array
        items:
          $ref: '#/definitions/BookRequestDto'
      status:
        type: string
        enum:
          - CANCELLED
          - CREATED
          - PERFORMED
          - PROCESSING
      userId:
        type: integer
        format: int64
    title: OrderRequestDto
  OrderUpdateForAdmin:
    type: object
    properties:
      id:
        type: integer
        format: int64
      status:
        type: string
        enum:
          - CANCELLED
          - CREATED
          - PERFORMED
          - PROCESSING
      userId:
        type: integer
        format: int64
    title: OrderUpdateForAdmin
  OrderUpdateForUserDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
      orderedBookIds:
        type: array
        items:
          type: integer
          format: int64
      userId:
        type: integer
        format: int64
    title: OrderUpdateForUserDto
  PublisherRequestDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      publishedBooks:
        type: array
        items:
          $ref: '#/definitions/BookDto'
    title: PublisherRequestDto
  PublisherResponseDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    title: PublisherResponseDto
  UserResponseDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
      isBlocked:
        type: boolean
      role:
        type: string
        enum:
          - ADMIN
          - USER
      username:
        type: string
    title: UserResponseDto
  UserUpdateAndSaveUserDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
      password:
        type: string
      username:
        type: string
    title: UserUpdateAndSaveUserDto



